---
description: 해당 프로젝트에 적용되는 rule
globs: 
---


# 프로젝트 구조

- app/root : 라우팅 폴더, expo-router 라이브러리에 의존하는 라우팅 디렉터리
- app/View : 
    - store : 순수 View영역에서 필요한 스토어가 정의되는 곳, 예:react-query-provider, theme-provider, alert-modal-store 등
    - hooks : 필요한 경우 View 스토어 사용을 위한 훅 정의
    - icon : tsx 형식의 아이콘이 필요한경우 여기에 정의
    - core : Headless, Combined headless, nonheadless 컴포넌트가 정의됨, 특정 페이지에만 사용되는 컴포넌트의 경우 페이지 디렉터리 하위 components폴더에 정의

- service : 서비스 핵심 로직들이 정의되는 공간, View 를 조작하는 로직은 정의되지 않음
    - inbound : 프로젝트 도메인과 연관된 서비스를 정의하는 곳
        - 예: [Auth] :
            - adapter : 해당 서비스 객체가 제공하는 기능을 클래스 혹은 훅 형식으로 작성, 하나의 어댑터 내에 훅, 클래스 형태 총 두가지 export가 제공될 수 있음 / required
            - consts : 서비스에 귀속된 상수 값들을 정의  / optional
            - store : 서비스에 귀속된 전역 스토어 정의, zustand기반,  예 :AuthStore / optional
            - types.d.ts : 서비스에 귀속된 도메인 타입 정의, 예 : UserInterface / optional

    - lib : 도메인과 연관되지 않고 범용적으로 사용할 수 있는 서비스 로직이 정의되는 곳
        - 예 : [Ad] :
            - adapter : 이하 동일 / required
            - consts : 이하 동일 / optional
            - store : 이하 동일 / optional
            - types.d.ts : 이하 동일 / optional

- application : 여러 서비스 로직이 종합되어 하나의 액션을 수행하는 로직을 작성하는 공간
    - 형태 :훅 형태로 제공
    - 의존성 : 여러 service, store 의존성을 가질 수 있음
    - 네이밍 : 파일 이름은 액션으로 정의되어야 함 예 : signOut, signIn 등
    - 목표 : signIn이라는 액션에 필요한 여러 서비스 로직을 하나의 훅 안에 담음, 재사용 가능하도록 구축,
    - 디렉터리 구조 : application/[도메인이름]/[액션이름].ts
    - 하나의 도메인 내에 여러 액션 존재 가능
    - 자세한 주석 작성 필수, 어떤 기능 수행하는지, 어떤 의존성을 갖는 지 등
    - 새로운 application hook을 제작하기 이전 유사한 어플리케이션이 존재하는지 검사 필수 

- 서비스 스택 : [package.json](mdc:package.json)


